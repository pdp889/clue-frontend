{"version":3,"sources":["GameComponents/Summary.js","GameComponents/Board.js","FormComponents/OpponentForm.js","FormComponents/ClueForm.js","FormComponents/UserForm.js","FormComponents/PlayerCard.js","FormComponents/PlayerList.js","FormComponents/Forms.js","HeaderComponents/Header.js","GameComponents/addMove.js","AuthComponents/LoginPage.js","AuthComponents/SignUp.js","AuthComponents/AuthControl.js","App.js","AuthComponents/useToken.js","AuthComponents/useGameStarted.js","reportWebVitals.js","index.js"],"names":["Summary","props","useState","summary","setSummary","useEffect","fetchItems","a","fetch","method","headers","token","data","json","dataReturn","dataArray","Array","from","clueBreakdown","i","length","className","scope","map","obj","index","Board","players","setPlayers","tablePrep","setTablePrep","showDetails","setShowDetails","handleTablePrep","array","smallArray","value","push","arrayItem","playerInfos","forEach","item","tracking_array","color","arrayedItem","_id","name","toggleShowDetails","onClick","OpponentForm","setName","trackingArray","numberCards","setNumberCards","errors","setErrors","sendData","requestOptions","body","JSON","stringify","number_cards","then","response","undefined","errorArray","msg","refresh","onSubmit","e","preventDefault","htmlFor","onChange","target","type","autoComplete","min","max","ClueForm","formArray","setFormArray","toggleByIndex","copy","arrayFromForm","class","UserForm","showCards","setShowCards","setMessage","setTrackingArray","trueFalseArray","PlayerCard","event","alert","addRemove","PlayerList","removeCount","setRemoveCount","addCount","Forms","setAddCount","showUserForm","setShowUserForm","showPlayerList","setShowPlayerList","increaseAddCount","toggleShowUserForm","toggleShowPlayerList","Header","logOut","sessionStorage","clear","setToken","endGame","setGameStarted","startGame","error","gameStarted","to","AddMove","allPlayers","setAllPlayers","player","setPlayer","request","setRequest","cardShown","setCardShown","allNo","setAllNo","toggleShowCards","onSubmitTask","playerId","cardshown","all_no","workingRequest","loginUser","credentials","catch","err","console","log","Login","username","setUserName","password","setPassword","message","handleSubmit","toggle","signUser","SignUp","AuthControl","signUp","setSignUp","login","setLogin","toggleSignUp","toggleLogin","App","tokenString","getItem","userToken","parse","getToken","setItem","useToken","startedString","getGameStarted","gameStartedMessage","useGameStarted","basename","path","exact","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.deb770a2.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport '../clueColors.css';\nimport './gameComponents.css'\n\nexport default function Summary (props) {\n    \n    const [summary, setSummary] = useState([]);\n\n    useEffect(()=>{\n        fetchItems();\n    },[summary])\n\n    const fetchItems = async () => {\n        const data = await fetch ('https://smart-clue-backend.herokuapp.com/boardSummary', {\n            method: 'GET',\n            headers: {\n                'Authorization': 'Bearer ' + props.token },\n        });\n        const dataReturn = await data.json();\n        let dataArray = Array.from(dataReturn);\n            let clueBreakdown = [\n                [\n                    'Mustard',\n                    null\n                ],\n                [\n                    'Plum',\n                    null\n                ],\n                [\n                    'Green',\n                    null\n                ],\n                [\n                    'Peacock',\n                    null\n                ],\n                [\n                    'Scarlet',\n                    null\n                ],\n                [\n                    'White',\n                    null\n                ],\n                [\n                    'Knife',\n                    null\n                ],\n                [\n                    'Candlestick',\n                    null\n                ],\n                [\n                   'Revolver',\n                    null\n                ],\n                [\n                   'Rope',\n                    null\n                ],\n                [\n                    'Lead Pipe',\n                    null\n                ],\n                [\n                    'Wrench',\n                    null\n                ],\n                [\n                    'Hall',\n                     null\n                ],\n                [\n                   'Lounge',\n                    null\n                ],\n                [\n                    'Dining Room',\n                    null\n                ],\n                [\n                    'Kitchen',\n                    null\n                ],\n                [\n                    'Ballroom',\n                    null\n                ],\n                [\n                    'Conservatory',\n                    null\n                ],\n                [\n                    'Billiard Room',\n                    null\n                ],\n                [\n                    'Library',\n                    null\n                ],\n                [\n                    'Study',\n                    null\n                ]\n            ]\n            for (let i = 0; i<dataArray.length; i++){\n                if (dataArray[i][\"value\"] === null){\n                    clueBreakdown[i][1] = '';\n                } else {\n                    clueBreakdown[i][1] = dataArray[i][\"value\"];\n                }\n            }\n\n        setSummary(clueBreakdown);\n    }\n\n    return (\n        <div className=\"border-end border-5 clue-table-border-color\">\n        <table className=\"table table-bordered\">\n            <thead>\n                <tr>\n                    <th scope=\"col\">Card</th>\n                    <th scope=\"col\">Known?</th>\n                </tr>\n            </thead>\n            <tbody>\n                {summary.map((obj, index) => {\n                    return (\n                        <tr key={71+ index}> \n                            <th scope=\"row\" >{obj[0]}</th>\n                            <td>{obj[1]}</td>\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </table>\n        </div>\n        \n\n    )\n}","import { useEffect, useState } from \"react\";\nimport Summary from \"./Summary\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../clueColors.css';\nimport './gameComponents.css';\n\nimport {Check, X, Question, ThreeDotsVertical } from 'react-bootstrap-icons';\n\nexport default function Board (props) {\n    \n    const [players, setPlayers] = useState([]);\n    const [tablePrep, setTablePrep] = useState([]);\n    const [showDetails, setShowDetails] = useState(false);\n\n    useEffect(()=>{\n        fetchItems();\n        handleTablePrep();\n    },[players])\n\n\n\n    const handleTablePrep = () => {\n        let array = [];\n        if (players.length > 0){\n            for (let i = 0; i<21; i++){\n                let smallArray = [];\n                \n                players.map((value, index) => {\n                    smallArray.push (\n                            <td>{value[2][i][1]}</td>\n                    )\n                })\n                array.push (\n                    <tr>\n                        {smallArray.map ((arrayItem) => {\n                            return arrayItem;\n                        })}\n                    </tr>\n                )\n                    }\n            setTablePrep(array);\n        }\n\n    }\n\n\n    const fetchItems = async () => {\n        const data = await fetch ('https://smart-clue-backend.herokuapp.com/board', {\n            method: 'GET',\n            headers: {\n            'Authorization': 'Bearer ' + props.token },\n        });\n        const dataReturn = await data.json();\n        let playerInfos = [];\n        Array.from(dataReturn).forEach(item => {\n            let clueBreakdown = [\n                [\n                    'Mustard',\n                    null\n                ],\n                [\n                    'Plum',\n                    null\n                ],\n                [\n                    'Green',\n                    null\n                ],\n                [\n                    'Peacock',\n                    null\n                ],\n                [\n                    'Scarlet',\n                    null\n                ],\n                [\n                    'White',\n                    null\n                ],\n                [\n                    'Knife',\n                    null\n                ],\n                [\n                    'Candlestick',\n                    null\n                ],\n                [\n                   'Revolver',\n                    null\n                ],\n                [\n                   'Rope',\n                    null\n                ],\n                [\n                    'Lead Pipe',\n                    null\n                ],\n                [\n                    'Wrench',\n                    null\n                ],\n                [\n                    'Hall',\n                     null\n                ],\n                [\n                   'Lounge',\n                    null\n                ],\n                [\n                    'Dining Room',\n                    null\n                ],\n                [\n                    'Kitchen',\n                    null\n                ],\n                [\n                    'Ballroom',\n                    null\n                ],\n                [\n                    'Conservatory',\n                    null\n                ],\n                [\n                    'Billiard Room',\n                    null\n                ],\n                [\n                    'Library',\n                    null\n                ],\n                [\n                    'Study',\n                    null\n                ]\n            ]\n            for (let i = 0; i<item.tracking_array.length; i++){\n\n                if (item.tracking_array[i] == 0){\n                    clueBreakdown[i][1] = <Question color=\"lightgrey\"/>;\n                } else if (item.tracking_array[i] === 1){\n                    clueBreakdown[i][1] = <Check font-weight=\"bold\" color=\"darkgreen\"/>\n                } else {\n                    clueBreakdown[i][1] = <X font-weight=\"bold\" color=\"red\"/>\n                }\n            }\n            let arrayedItem = [item._id, item.name, clueBreakdown]\n            playerInfos.push(arrayedItem);\n        })\n        setPlayers(playerInfos);\n    }\n\n    const toggleShowDetails = () => {\n        if (showDetails===true) {\n            setShowDetails(false)\n        } else {\n            setShowDetails(true);\n        }\n    }\n    \n    if (showDetails){\n        return (\n            <div className=\"d-flex flex-row bg-clue-secondary padding-2\">\n                <Summary token={props.token}/> \n                <table className=\"table table-bordered\">\n                    <thead className=\"thead-dark\">\n                        <tr>\n                            {players.map((value, index) => {\n                                return (\n                                    <th scope=\"col\">{value[1]}</th>\n                                )\n                            })}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {tablePrep}\n                    </tbody>\n                </table>\n                <button className=\"no-detail-button expand-close\" onClick={toggleShowDetails}>Hide</button>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"d-flex flex-row bg-clue-secondary padding-2\">\n                <Summary token={props.token}/> \n                <button className=\"no-detail-button expand-close\" onClick={toggleShowDetails}>Expand</button>\n            </div>\n        )\n    }\n\n}","import { useState } from \"react\";\nimport './forms.css';\nimport '../clueColors.css';\n\nexport default function OpponentForm (props) {\n    \n    \n    const [name, setName] = useState('');\n    const trackingArray = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];\n    const [numberCards, setNumberCards] = useState(0);\n    const [errors, setErrors] = useState([]);\n    \n\n\n    const onSubmitTask = (event) => {\n        event.preventDefault();\n\n        sendData();\n    }\n\n    const sendData = () => {\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + props.token },\n            body: JSON.stringify({ name: name, tracking_array: trackingArray, number_cards: numberCards})\n        }\n        \n        fetch('https://smart-clue-backend.herokuapp.com/addPlayer', requestOptions)\n        .then(response => response.json())\n        .then(data => {\n            if (data.errors !== undefined){\n                let array = Array.from(data.errors);\n                let errorArray = [];\n                array.forEach(item => {\n                    errorArray.push(item.msg + \"; \")\n                })\n                setErrors(errorArray)\n            } else {\n                setName('');\n                setNumberCards(0);\n                props.refresh();\n            }\n        })\n    }\n   \n    return (\n        <div className=\"card bg-clue-secondary\">\n            <div className='card-body'>\n                <h1>Add Opponent</h1>\n                <form onSubmit ={e => {onSubmitTask(e)}}>\n                    <label htmlFor='name'>Name</label>\n                    <input\n                        onChange={e => setName(e.target.value)}\n                        type='text'\n                        name='name'\n                        className='form-control'\n                        autoComplete='off'\n                        value={name}\n                    />\n                    <label htmlFor='cardsNumber'>Number of Cards</label>\n                    <input\n                        onChange={e => setNumberCards(e.target.value)}\n                        type='number'\n                        name='cardsNumber'\n                        className='form-control'\n                        autoComplete='off'\n                        value={numberCards}\n                        min='1'\n                        max='6'\n                    />\n                    <input type=\"submit\" className=\"btn btn-primary record-submit\" value=\"Add Opponent\" />\n                </form>\n            </div> \n            {errors}\n        </div>\n    )\n}","import { useState } from \"react\"\nimport '../clueColors.css';\n// This component will generate an array of the indexes of the selected boxes.\n\nexport default function ClueForm (props) {\n    \n    const [formArray, setFormArray] = useState ([false, false, false, false, false, false,false, false, false, false, false, false,false, false, false, false, false, false,false, false, false])\n\n    const onSubmitTask = (event) => {\n        event.preventDefault();\n        props.arrayFromForm(formArray);\n    }\n\n    const toggleByIndex = (index) => {\n        let copy = [...formArray]\n        if (copy[index] === false){\n            copy[index] = true;\n        } else {\n            copy[index] = false;\n        }\n        setFormArray(copy);\n    }\n\n    return(\n        <div className=\"bg-clue-secondary\">\n            <form onSubmit ={e => {onSubmitTask(e)}}>\n            <div class=\"form-group\">\n                <h4>Suspects</h4>\n                <div className=\"form-check\">\n                    <label htmlFor='Mustard'>Mustard</label>\n                    <input\n                        onChange={e => toggleByIndex(0)}\n                        type='checkbox'\n                        name='Mustard'\n                        className=\"form-check-input\"\n                        value={formArray[0]}\n                    />\n                </div>\n                <div className=\"form-check\">\n                    <label htmlFor='Plum'>Plum</label>\n                    <input\n                        onChange={e => toggleByIndex(1)}\n                        type='checkbox'\n                        name='Plum'\n                        className=\"form-check-input\"\n                        value={formArray[1]}\n                    />\n                </div>\n                <div className=\"form-check\">\n                    <label htmlFor='Green'>Green</label>\n                    <input\n                        onChange={e => toggleByIndex(2)}\n                        type='checkbox'\n                        name='Green'\n                        className=\"form-check-input\"\n                        value={formArray[2]}\n                    />\n                </div>\n                <div className=\"form-check\">\n                    <label htmlFor='Peacock'>Peacock</label>\n                    <input\n                        onChange={e => toggleByIndex(3)}\n                        type='checkbox'\n                        name='Peacock'\n                        className=\"form-check-input\"\n                        value={formArray[3]}\n                    />\n                </div>\n                <div className=\"form-check\">\n                    <label htmlFor='Scarlet'>Scarlet</label>\n                    <input\n                        onChange={e => toggleByIndex(4)}\n                        type='checkbox'\n                        name='Scarlet'\n                        className=\"form-check-input\"\n                        value={formArray[4]}\n                    />\n                </div>\n                <div className=\"form-check\">\n                    <label htmlFor='White'>White</label>\n                    <input\n                        onChange={e => toggleByIndex(5)}\n                        type='checkbox'\n                        name='White'\n                        className=\"form-check-input\"\n                        value={formArray[5]}\n                    />\n                </div>\n            </div>\n                <div class=\"form-group\">\n                    <h4>Weapons</h4>\n                    <div className=\"form-check\">\n                        <label htmlFor='Knife'>Knife</label>\n                        <input\n                            onChange={e => toggleByIndex(6)}\n                            type='checkbox'\n                            name='Knife'\n                            className=\"form-check-input\"\n                            value={formArray[6]}\n                        />\n                    </div>\n                    <div className=\"form-check\">\n                        <label htmlFor='Candlestick'>Candlestick</label>\n                        <input\n                            onChange={e => toggleByIndex(7)}\n                            type='checkbox'\n                            name='Candlestick'\n                            className=\"form-check-input\"\n                            value={formArray[7]}\n                        />\n                    </div>\n                    <div className=\"form-check\">\n                        <label htmlFor='Revolver'>Revolver</label>\n                        <input\n                            onChange={e => toggleByIndex(8)}\n                            type='checkbox'\n                            name='Revolver'\n                            className=\"form-check-input\"\n                            value={formArray[8]}\n                        />\n                        </div>\n                    <div className=\"form-check\">\n                        <label htmlFor='Rope'>Rope</label>\n                        <input\n                            onChange={e => toggleByIndex(9)}\n                            type='checkbox'\n                            name='Rope'\n                            className=\"form-check-input\"\n                            value={formArray[9]}\n                        />\n                    </div>\n                    <div className=\"form-check\">\n                        <label htmlFor='Lead Pipe'>Lead Pipe</label>\n                        <input\n                            onChange={e => toggleByIndex(10)}\n                            type='checkbox'\n                            name='Lead Pipe'\n                            className=\"form-check-input\"\n                            value={formArray[10]}\n                        />\n                    </div>\n                    <div className=\"form-check\">\n                        <label htmlFor='Wrench'>Wrench</label>\n                        <input\n                            onChange={e => toggleByIndex(11)}\n                            type='checkbox'\n                            name='Wrench'\n                            className=\"form-check-input\"\n                            value={formArray[11]}\n                        />\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <h4>Rooms</h4>\n                    <div className=\"form-check\">\n                        <label htmlFor='Hall'>Hall</label>\n                        <input\n                            onChange={e => toggleByIndex(12)}\n                            type='checkbox'\n                            name='Hall'\n                            className=\"form-check-input\"\n                            value={formArray[12]}\n                        />\n                    </div>\n                    <div className=\"form-check\">\n                        <label htmlFor='Lounge'>Lounge</label>\n                        <input\n                            onChange={e => toggleByIndex(13)}\n                            type='checkbox'\n                            name='Lounge'\n                            className=\"form-check-input\"\n                            value={formArray[13]}\n                        />\n                    </div>\n                    <div className=\"form-check\">\n                        <label htmlFor='Dining Room'>Dining Room</label>\n                        <input\n                            onChange={e => toggleByIndex(14)}\n                            type='checkbox'\n                            name='Dining Room'\n                            className=\"form-check-input\"\n                            value={formArray[14]}\n                        />\n                    </div>\n                    <div className=\"form-check\">\n                        <label htmlFor='Kitchen'>Kitchen</label>\n                        <input\n                            onChange={e => toggleByIndex(15)}\n                            type='checkbox'\n                            name='Kitchen'\n                            className=\"form-check-input\"\n                            value={formArray[15]}\n                        />\n                    </div>\n                    <div className=\"form-check\">\n                        <label htmlFor='Ballroom'>Ballroom</label>\n                        <input\n                            onChange={e => toggleByIndex(16)}\n                            type='checkbox'\n                            name='Ballroom'\n                            className=\"form-check-input\"\n                            value={formArray[16]}\n                        />\n                    </div>\n                    <div className=\"form-check\">\n                        <label htmlFor='Conservatory'>Conservatory</label>\n                        <input\n                            onChange={e => toggleByIndex(17)}\n                            type='checkbox'\n                            name='Conservatory'\n                            className=\"form-check-input\"\n                            value={formArray[17]}\n                        />\n                        </div>\n                    <div className=\"form-check\">\n                        <label htmlFor='Billiard Room'>Billiard Room</label>\n                        <input\n                            onChange={e => toggleByIndex(18)}\n                            type='checkbox'\n                            name='Billiard Room'\n                            className=\"form-check-input\"\n                            value={formArray[18]}\n                        />\n                    </div>\n                    <div className=\"form-check\">\n                        <label htmlFor='Library'>Library</label>\n                        <input\n                            onChange={e => toggleByIndex(19)}\n                            type='checkbox'\n                            name='Library'\n                            className=\"form-check-input\"\n                            value={formArray[19]}\n                        />\n                    </div>\n                    <div className=\"form-check\">\n                        <label htmlFor='Study'>Study</label>\n                        <input\n                            onChange={e => toggleByIndex(20)}\n                            type='checkbox'\n                            name='Study'\n                            className=\"form-check-input\"\n                            value={formArray[20]}\n                        />\n                    </div>\n                </div>\n                \n                <input type=\"submit\" className=\"btn btn-primary record-submit\" value=\"Add Cards\" />\n            </form>\n        </div>\n    )\n}","import { useState } from \"react\";\nimport './forms.css'\nimport ClueForm from \"./ClueForm\";\nimport '../clueColors.css';\n\nexport default function UserForm (props) {\n    \n    const [showCards, setShowCards] = useState(true);\n    const [message, setMessage] = useState('cards not loaded');\n    const [name, setName] = useState('');\n    const [trackingArray, setTrackingArray] = useState([-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]);\n    const [numberCards, setNumberCards] = useState(0);\n    const [errors, setErrors] = useState([]);\n    \n    const getArrayFromForm = (trueFalseArray) => {\n        let copy = [];\n        for (let i = 0; i<trueFalseArray.length; i++){\n            if (trueFalseArray[i] === true){\n                copy.push(1);\n            } else {\n                copy.push(-1);\n            }\n        }\n        setTrackingArray(copy);\n        setShowCards(false);\n        setMessage('cards loaded');\n    }\n\n    const onSubmitTask = (event) => {\n        event.preventDefault();\n        sendData();\n        \n    }\n\n    const toggleShowCards = () => {\n        if (showCards === true){\n            setShowCards(false)\n        } else {\n            setShowCards(true)\n        }\n    }\n\n    const sendData = () => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + props.token },\n            body: JSON.stringify({ name: name, tracking_array: trackingArray, number_cards: numberCards})\n        }\n        fetch('https://smart-clue-backend.herokuapp.com/addPlayer', requestOptions)\n        .then(response => response.json())\n        .then(data => {\n            if (data.errors !== undefined){\n                let array = Array.from(data.errors);\n                let errorArray = [];\n                array.forEach(item => {\n                    errorArray.push(item.msg + \"; \")\n                })\n                setErrors(errorArray)\n            } else {\n                setName('');\n                setTrackingArray([]);\n                setNumberCards(0);\n                setShowCards(true);\n                setMessage('');\n                props.refresh();\n            }\n        })\n    }\n   \n    if (showCards){\n        return (\n            <div className=\"card bg-clue-secondary\">\n                <div className='card-body'>\n                    <h1>Add User Cards</h1>\n                    <ClueForm arrayFromForm={getArrayFromForm}/>\n                </div>\n                {errors}\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"card bg-clue-secondary\">\n                <button onClick={toggleShowCards}>Change cards</button>\n                <div className='card-body'>\n                    <h1>Add User Information</h1>\n                    <form onSubmit ={e => {onSubmitTask(e)}}>\n                        <label htmlFor='name'>Name</label>\n                        <input\n                            onChange={e => setName(e.target.value)}\n                            type='text'\n                            name='name'\n                            className='form-control'\n                            autoComplete='off'\n                            value={name}\n                        />\n                        <label htmlFor='cardsNumber'>Number of Cards</label>\n                        <input\n                            onChange={e => setNumberCards(e.target.value)}\n                            type='number'\n                            name='cardsNumber'\n                            className='form-control'\n                            autoComplete='off'\n                            value={numberCards}\n                            min='1'\n                            max='6'\n                        />\n                        <input type=\"submit\" className=\"btn btn-primary record-submit\" value=\"Add User\" />\n                    </form>\n                </div> \n                {errors}\n            </div>\n        )\n    }\n    \n}","import '../clueColors.css';\nexport default function PlayerCard (props) {\n    \n    const removePlayer = (event) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + props.token },\n            body: JSON.stringify({ _id: props.value[0]})\n        }\n        fetch('https://smart-clue-backend.herokuapp.com/removePlayer', requestOptions)\n        .then(response => response.json())\n        .then(data => {\n            if(data.errors != undefined){\n                let array = Array.from(data.errors);\n                let errorArray = [];\n                array.forEach(item => {\n                    errorArray.push(item.msg + \"; \")\n                })\n                alert(errorArray)\n            } else {\n                props.addRemove();\n            }            \n            return data;\n        })\n\n    }\n    \n    return (\n        <div key={props.index *11} className='card player-card'>\n            <p>Name: {props.value[1]}</p>\n            <p>Number of Cards: {props.value[2]}</p>\n            <button className=\"btn btn-primary w-50\" onClick={removePlayer}>Remove Player</button>\n        </div>\n    )\n}","import { useEffect, useState } from \"react\";\nimport '../clueColors.css';\n\nimport PlayerCard from './PlayerCard'\n\nexport default function PlayerList (props) {\n\n        const [players, setPlayers] = useState([]);\n        const [removeCount, setRemoveCount] = useState(0);\n\n        const addRemove = () => {\n            setRemoveCount(removeCount+1)\n        }\n    \n        useEffect(()=>{\n            fetchItems();\n        },[removeCount, props.addCount])\n    \n        const fetchItems = async () => {\n            const data = await fetch ('https://smart-clue-backend.herokuapp.com/board', {\n                method: 'GET',\n                headers: { 'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + props.token },\n            });\n            const dataReturn = await data.json();\n            let playerInfos = [];\n            Array.from(dataReturn).forEach(item => {\n                let arrayedItem = [item._id, item.name, item.number_cards]\n                playerInfos.push(arrayedItem);\n            })\n            setPlayers(playerInfos);\n        }\n\n\n        \n        return (\n            <div>\n                {players.map((value, index) => {\n                    return <PlayerCard value={value} index={index} addRemove={addRemove} token={props.token}/>\n                })}\n            </div>\n        )\n    }","import OpponentForm from './OpponentForm';\nimport UserForm from './UserForm';\nimport {BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport PlayerList from \"./PlayerList\"\nimport { useState } from 'react';\nimport '../clueColors.css';\n\nexport default function Forms (props) {\n\n    const [addCount, setAddCount] = useState(0);\n    const [showUserForm, setShowUserForm] = useState(true);\n    const [showPlayerList, setShowPlayerList] = useState(false);\n\n    const increaseAddCount = () => {\n        setAddCount(addCount + 1);\n    }\n\n    const toggleShowUserForm = () => {\n        if (showUserForm === true){\n            setShowUserForm(false)\n        } else {\n            setShowUserForm(true);\n        }\n    }\n\n    const toggleShowPlayerList = () => {\n        if (showPlayerList === true){\n            setShowPlayerList(false)\n        } else {\n            setShowPlayerList(true)\n        }\n    }\n\n    if (showPlayerList && showUserForm){\n        return(\n            <div className='row bg-clue-secondary padding-2 vh-100'>\n                <div className = 'col'>\n                    <button className=\"no-detail-button w-100\" onClick={toggleShowUserForm}>Add Opponent Instead</button>\n                    <UserForm token={props.token} refresh={increaseAddCount}  />\n                </div>            \n                <div className='col'>\n                    <button className=\"no-detail-button w-100\" onClick={toggleShowPlayerList}>Hide Player List</button>\n                    <PlayerList addCount={addCount} token={props.token}/>\n                \n                </div>\n            </div>\n        )\n    } else if (showPlayerList) {\n        return(\n            <div className='row bg-clue-secondary padding-2 vh-100'>\n                <div className = 'col'>\n                    <button className=\"no-detail-button w-100\" onClick={toggleShowUserForm}>Add User Instead</button>\n                    <OpponentForm token={props.token}  refresh={increaseAddCount} />       \n                </div>            \n                <div className='col'>\n                <button className=\"no-detail-button w-100\" onClick={toggleShowPlayerList}>Hide Player List</button>\n                    <PlayerList addCount={addCount} token={props.token}/>\n                    \n                </div>\n            </div>\n        ) \n    } else if (showUserForm) {\n        return(\n            <div className='row bg-clue-secondary padding-2 vh-100'>\n                <div className = 'col'> \n                    <button className=\"no-detail-button w-50\" onClick={toggleShowUserForm}>Add Opponent Instead</button>\n                    <button className=\"no-detail-button w-50\" onClick={toggleShowPlayerList}>Show Player List</button>\n                    <UserForm token={props.token} refresh={increaseAddCount}  />\n                   \n                </div>            \n            </div>\n        )\n    } else {\n        return(\n            <div className='row bg-clue-secondary padding-2 vh-100'>\n                <div className = 'col'>\n                    <button className=\"no-detail-button w-50\" onClick={toggleShowUserForm}>Add User Instead</button>\n                    <button className=\"no-detail-button w-50\" onClick={toggleShowPlayerList}>Show Player List</button>\n                    <OpponentForm token={props.token}  refresh={increaseAddCount} />\n                    \n                </div>            \n            </div>\n        )\n    }\n\n}","import { Link} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../clueColors.css';\nimport './Header.css'\n\nexport default function Header (props) {\n    \n    const logOut = () => {\n        sessionStorage.clear();\n        props.setToken('');\n    }\n\n    const endGame = async () => {\n        const data = await fetch ('https://smart-clue-backend.herokuapp.com/endGame', {\n            method: 'GET',\n            headers: {\n                'Authorization': 'Bearer ' + props.token },\n        });\n        const dataReturn = await data.json();\n        props.setGameStarted(false);\n        \n    }\n\n    const startGame = async () => {\n        const data = await fetch ('https://smart-clue-backend.herokuapp.com/startGame', {\n            method: 'GET',\n            headers: {\n                'Authorization': 'Bearer ' + props.token },\n        });\n        const dataReturn = await data.json();\n        if (!dataReturn.error) {\n            props.setGameStarted(dataReturn)\n        } else {\n            alert(dataReturn.error)\n        }\n    }\n\n    if (props.gameStarted){\n        return(\n            <div className=\"d-flex justify-content-between bg-clue-primary\">\n                <div className=\"d-flex padding-05\">\n                    <Link  className=\"text-decoration-none text-clue-primary margin-02 header-hover\" to='/addMove'>\n                        <div >Add Move</div>\n                    </Link>\n                    <Link className=\"text-decoration-none text-clue-primary margin-02 header-hover\" to=\"/\">\n                        <div >Game Board</div>\n                    </Link>\n                </div>\n                <div className=\"d-flex padding-05\">\n                    <div class=\"text-decoration-none text-clue-primary margin-02 header-hover\" onClick={endGame}>End Game</div>\n                    <div className=\"text-decoration-none text-clue-primary margin-02 header-hover\" onClick={logOut}>Log Out</div>\n                </div>\n            </div>\n        )\n    } else {\n        return(\n            <div className=\"d-flex justify-content-between bg-clue-primary\">\n                <div className=\"text-decoration-none text-clue-primary margin-02 header-hover\" onClick={startGame}>Go to Game</div>\n                <Link className=\"text-decoration-none text-clue-primary margin-02 header-hover\" to=\"/\">\n                        <div >Forms</div>\n                </Link>\n                <div className=\"text-decoration-none text-clue-primary margin-02 header-hover\" onClick={logOut}>Log Out</div>\n            </div>\n        )\n    }\n\n\n\n}","import { useEffect, useState } from \"react\";\nimport ClueForm from \"../FormComponents/ClueForm\"\nimport \"../FormComponents/forms.css\"\nimport '../clueColors.css';\n\nexport default function AddMove (props) {\n    \n    const [showCards, setShowCards] = useState(true);\n    const [message, setMessage] = useState('cards not loaded');\n    const [allPlayers, setAllPlayers] = useState([[]]);\n    const [player, setPlayer] = useState('');\n    const [request, setRequest] = useState([]);\n    const [cardShown, setCardShown] = useState(-1);\n    const [allNo, setAllNo] = useState(false);\n    const [errors, setErrors] = useState([]);\n\n    let clueBreakdown = [\n        [\n            'Mustard',\n            null\n        ],\n        [\n            'Plum',\n            null\n        ],\n        [\n            'Green',\n            null\n        ],\n        [\n            'Peacock',\n            null\n        ],\n        [\n            'Scarlet',\n            null\n        ],\n        [\n            'White',\n            null\n        ],\n        [\n            'Knife',\n            null\n        ],\n        [\n            'Candlestick',\n            null\n        ],\n        [\n           'Revolver',\n            null\n        ],\n        [\n           'Rope',\n            null\n        ],\n        [\n            'Lead Pipe',\n            null\n        ],\n        [\n            'Wrench',\n            null\n        ],\n        [\n            'Hall',\n             null\n        ],\n        [\n           'Lounge',\n            null\n        ],\n        [\n            'Dining Room',\n            null\n        ],\n        [\n            'Kitchen',\n            null\n        ],\n        [\n            'Ballroom',\n            null\n        ],\n        [\n            'Conservatory',\n            null\n        ],\n        [\n            'Billiard Room',\n            null\n        ],\n        [\n            'Library',\n            null\n        ],\n        [\n            'Study',\n            null\n        ]\n    ]\n\n    useEffect(()=>{\n        fetchItems();\n    },[])\n\n    const fetchItems = async () => {\n        const data = await fetch ('https://smart-clue-backend.herokuapp.com/board', {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        });\n        const dataReturn = await data.json();\n        let playerInfos = [];\n        Array.from(dataReturn).forEach(item => {\n            let arrayedItem = [item._id, item.name, item.number_cards]\n            playerInfos.push(arrayedItem);\n        })\n        setAllPlayers(playerInfos);\n    }\n\n    const onSelectChange = (event) => {\n        setPlayer(event.target.value);\n    }\n\n    const onAllNoChange = (event) => {\n        setAllNo(event.target.value);\n    }\n\n    const onCardShownChange = (event) => {\n        setCardShown(event.target.value);\n    }\n\n    const clueFormResultHandler = (array) => {\n        let workingRequest = [];\n        for (let i = 0; i < array.length; i++){\n            if(array[i] === true){\n                workingRequest.push(i)\n            }\n        }\n        setRequest(workingRequest);\n        toggleShowCards();\n        setMessage('cards loaded');\n    }\n\n    const toggleShowCards = () => {\n        if (showCards === true){\n            setShowCards(false)\n        } else {\n            setShowCards(true)\n        }\n    }\n\n\n    const sendData = () => {\n        if (player==\"\"){\n            setErrors('player not selected')\n        } else {\n            const toSend = JSON.stringify({ playerId: player, request: request, cardshown: cardShown, all_no: allNo})\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + props.token },\n                body: JSON.stringify({ playerId: player, request: request, cardshown: cardShown, all_no: allNo})        }\n    \n            fetch('https://smart-clue-backend.herokuapp.com/addMove', requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.errors !== undefined){\n                    let array = Array.from(data.errors);\n                    let errorArray = [];\n                    array.forEach(item => {\n                        errorArray.push(item.msg + \"; \")\n                    })\n                    setErrors(errorArray)\n                } else {\n                    setPlayer('');\n                    setRequest([]);\n                    setCardShown(-1);\n                    setAllNo(false);\n                    setShowCards(true);\n                    setMessage('');\n                }\n            })\n        }\n    }\n\n\n    const onSubmitTask = (event) => {\n        event.preventDefault();\n        sendData();\n\n    }\n\n    if (showCards){\n       return(\n           <div className=\"card bg-clue-secondary vw-100 vh-100 padding-2\">\n               <h2>What was the suggestion made?</h2>\n               <ClueForm arrayFromForm={clueFormResultHandler} />\n           </div>\n            \n       ) \n    } else {\n        return (\n            <div className=\"w-50 bg-clue-secondary vh-100 vw-100 padding-2\">\n                <div className=\"d-flex justify-content-between\">\n                    <h2>Suggestion Details</h2>\n                    <button className=\"btn btn-outline-link\" onClick={toggleShowCards}>Change cards?</button>\n                </div>\n                <form onSubmit ={e => {onSubmitTask(e)}}>\n                    <label htmlFor='player'>Player</label>\n                    <select name=\"player\" value={player} className=\"form-select\" onChange={onSelectChange}>\n                       <option></option> \n                       {allPlayers.map((value, index) => {\n                            return <option key={index} value={value[0]}>{value[1]}</option>\n                        })}\n                    </select>\n                    <label htmlFor='allno'>All No?</label>\n                    <select name=\"allno\" className=\"form-select\" value={allNo} onChange={onAllNoChange}>\n                        <option  value={true}>true</option>\n                        <option  value={false}>false</option>\n                    </select>\n                \n                <label htmlFor='cardShown'>card shown</label>\n                    <select name=\"cardShown\" className=\"form-select\" value={cardShown} onChange={onCardShownChange}>\n                        <option value={-1}>Unknown</option>\n                        {clueBreakdown.map((value, index) => {\n                            return <option key={index} value={index}>{value[0]}</option>\n                        })}\n                    </select>\n                    <input type=\"submit\" className=\"btn btn-primary record-submit\" value=\"Add Move\" />\n                </form>\n                {errors}\n            </div>\n        )\n    }\n    \n}","import React, { useState } from 'react';\nimport './AuthControl.css'\nimport '../clueColors.css';\n\n// This is a helper function to log in a user. It is called in the handleSubmit function when a user clicks log in\nasync function loginUser(credentials) {\n  return fetch('https://smart-clue-backend.herokuapp.com/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  })\n  .then(data => data.json())\n  .catch(err => console.log(err));\n}\n\nexport default function Login(props) {\n  \n  const [username, setUserName] = useState();\n  const [password, setPassword] = useState();\n  const [message, setMessage] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const token = await loginUser({\n      username,\n      password\n    });\n    if (token.error){\n      setMessage(token.error);\n    } \n    props.setToken(token);\n  }\n\n    return(\n      <div className=\"login-signup text-clue-primary bg-clue-primary w-100\">\n        <div className='d-flex justify-content-between'>\n        <h3>Log In</h3>\n        <button className=\"btn btn-outline-link text-clue-primary\" onClick={props.toggle}>Back</button>\n      </div>\n      <form onSubmit={handleSubmit}>\n        <div className='form-group'>\n          <label htmlFor='username'>Username</label>\n            <input type=\"text\" name='username' className='form-control' onChange={e => setUserName(e.target.value)} />\n          <label htmlFor='password'>Password</label>\n            <input type=\"password\" className='form-control' onChange={e => setPassword(e.target.value)} />\n        </div>\n        \n        <div className='login-signup-button'>\n          <button className=\"btn btn-primary\" type=\"submit\">Submit</button>\n        </div>\n      </form>\n      <div className=\"text-danger\">\n        {message}\n      </div>\n    </div>\n  )\n\n}","import React, { useState } from 'react';\nimport '../clueColors.css';\n\n// this is an async function which signs up a user. It is called in the handleSubmit function which is called when a user clicks sign up.\nasync function signUser(credentials) {\n return fetch('https://smart-clue-backend.herokuapp.com/createNewUser', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  })\n   .then(data => data.json())\n   .catch(err => console.log(err));\n}\n\nexport default function SignUp(props) {\n  const [username, setUserName] = useState();\n  const [password, setPassword] = useState();\n  const [message, setMessage] = useState('');\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const token = await signUser({\n      username,\n      password\n    });\n    if (token.error){\n      setMessage(token.error);\n    } \n    props.setToken(token);\n    console.log(token);\n  }\n\n\n  return(\n    <div className=\"login-signup bg-clue-primary text-clue-primary w-100\">\n      <div className='d-flex justify-content-between'>\n      <h3>Sign Up</h3>\n      <button className=\"btn btn-outline-link text-clue-primary\" onClick={props.toggle}>Back</button>\n    </div>\n    <form onSubmit={handleSubmit}>\n      <div className='form-group'>\n        <label htmlFor='username'>Username</label>\n          <input type=\"text\" name='username' className='form-control' onChange={e => setUserName(e.target.value)} />\n        <label htmlFor='password'>Password</label>\n          <input type=\"password\" className='form-control' onChange={e => setPassword(e.target.value)} />\n      </div>\n      \n      <div className='login-signup-button'>\n        <button className=\"btn btn-primary\" type=\"submit\">Submit</button>\n      </div>\n    </form>\n    <div className=\"text-danger\">\n      {message}\n    </div>\n  </div>\n)\n}","import { useState } from \"react\";\nimport Login from \"./LoginPage\";\nimport SignUp from \"./SignUp\";\nimport './AuthControl.css'\nimport '../clueColors.css';\n\nexport default function AuthControl (props){\n    const [signUp, setSignUp] = useState(false);\n    const [login, setLogin] = useState(false);\n\n    const toggleSignUp = () => {\n        if (signUp === true) {\n            setSignUp(false);\n        } else {\n            setSignUp(true);\n        }\n    }\n\n    const toggleLogin = () => {\n        if (login === true) {\n            setLogin(false);\n        } else {\n            setLogin(true);\n        }\n    }\n\n    if (login){\n        return(\n            <Login setToken={props.setToken} toggle={toggleLogin}/>\n        )\n    } else if (signUp){\n        return(\n            <SignUp setToken={props.setToken} toggle={toggleSignUp}/>\n        )\n    } else {\n        return(\n            <div className='main-login-section d-flex flex-column justify-content-around text-clue-primary bg-clue-primary'>\n                <h2 className='title d-flex justify-content-around'>Clue Helper App</h2>\n                <div className='body-login-section d-flex flex-column justify-content-around align-items-center'>\n                    <button className=' login-signup-button btn btn-primary btn-lg' onClick={toggleSignUp}>Sign Up</button>\n                    <button className=' login-signup-button btn btn-primary btn-lg' onClick={toggleLogin}>Log In</button>\n                </div>\n            </div>\n        )\n    }\n}","import 'bootstrap/dist/css/bootstrap.min.css';\nimport Board from './GameComponents/Board';\nimport Forms from './FormComponents/Forms';\nimport Header from './HeaderComponents/Header';\nimport AddMove from './GameComponents/addMove';\nimport {BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport AuthControl from \"./AuthComponents/AuthControl\";\nimport useToken from \"./AuthComponents/useToken\";\nimport useGameStarted from './AuthComponents/useGameStarted';\nimport './clueColors.css';\n\n\nfunction App() {\n\n\n  const { token, setToken } = useToken();\n  const { message, setMessage } = useGameStarted();\n\n  //If a user is not logged in (i.e. no token), the user cannot view anything besides the login and sign up links\n  if(!token) {\n    return (\n    <div className='log-in-page bg-clue-secondary vh-100'>\n      <div className='d-flex flex-row justify-content-center '>\n        <AuthControl setToken={setToken} />       \n      </div>\n    </div>\n    )\n  }\n\n  if (message){\n    return(\n      <BrowserRouter basename={'/clue-frontend'}>\n        <Header gameStarted={message} setGameStarted={setMessage} token={token} setToken={setToken}/>\n        <Switch>\n            <Route path='/' exact render={(props) => (\n              <Board token={token} />\n            )} />\n            <Route path='/addMove' exact render={(props) => (\n              <AddMove token={token} />\n            )} />\n        </Switch>\n      </BrowserRouter>\n    )\n  } else {\n\n  return(\n    <BrowserRouter basename={'/clue-frontend'}>\n      <Header gameStarted={message} setGameStarted={setMessage} token={token} setToken={setToken}/>\n      <Switch>\n          <Route path='/' exact render={(props) => (\n            <Forms token={token} />\n          )} />\n      </Switch>\n    </BrowserRouter>\n  )\n\n  }\n}\n\nexport default App;\n","import { useState } from 'react';\n\n// This component handles the saving a token in sessionStorage, and also assigns the token to the state in App.js\nexport default function useToken() {\n  \n  const getToken = () => {\n    const tokenString = sessionStorage.getItem('token');\n    const userToken = JSON.parse(tokenString);\n    return userToken?.token\n  };\n\n  const [token, setToken] = useState(getToken());\n\n  const saveToken = (userToken) => {\n    sessionStorage.setItem('token', JSON.stringify(userToken));\n    setToken(userToken.token);\n  };\n\n  return {\n    setToken: saveToken,\n    token\n  }\n}","import { useState } from 'react';\n\n\n// This component handles the saving a token in sessionStorage, and also assigns the token to the state in App.js\nexport default function useGameStarted() {\n\n  const getGameStarted = () => {\n    const startedString = sessionStorage.getItem('gameStarted');\n    const gameStarted = JSON.parse(startedString);\n    return gameStarted?.message\n  };\n\n  const [message, setMessage] = useState(getGameStarted());\n\n  const saveMessage = (gameStartedMessage) => {\n    sessionStorage.setItem('gameStarted', JSON.stringify(gameStartedMessage));\n    setMessage(gameStartedMessage.message);\n  };\n\n  return {\n    setMessage: saveMessage,\n    message\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}